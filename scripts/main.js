/**
 * main.js - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–≥—Ä—ã –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
 */

// –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ (–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã)
const UPDATE_INTERVAL = 1000;

// –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
const mainButton = document.getElementById('main-button');
const mobileMainButton = document.getElementById('mobile-main-button');
const pointsDisplay = document.getElementById('points');
const perClickDisplay = document.getElementById('per-click');
const perSecondDisplay = document.getElementById('per-second');
const researchTreeContainer = document.getElementById('research-tree');
const achievementsContainer = document.getElementById('achievements-list');
const languageToggle = document.getElementById('language-toggle');
const themeToggle = document.getElementById('theme-toggle');
const soundToggle = document.getElementById('sound-toggle');
const resetButton = document.getElementById('reset-button');
const settingsButton = document.getElementById('settings-button');
const desktopSettingsMenu = document.getElementById('desktop-settings-menu');
const desktopThemeToggle = document.getElementById('desktop-theme-toggle');
const desktopLanguageToggle = document.getElementById('desktop-language-toggle');
const desktopSoundToggle = document.getElementById('desktop-sound-toggle');
const desktopReset = document.getElementById('desktop-reset');
const notification = document.getElementById('notification');
const notificationMessage = document.getElementById('notification-message');
const confirmModal = document.getElementById('confirm-modal');
const confirmYes = document.getElementById('confirm-yes');
const confirmNo = document.getElementById('confirm-no');

// –≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
const mobileMenu = document.getElementById('mobile-menu');
const mobileThemeToggle = document.getElementById('mobile-theme-toggle');
const mobileLangToggle = document.getElementById('mobile-language-toggle');
const mobileAchievements = document.getElementById('mobile-achievements');
const mobileSoundToggle = document.getElementById('mobile-sound-toggle');
const mobileReset = document.getElementById('mobile-reset');
const mobileZoomIn = document.getElementById('mobile-zoom-in');
const mobileZoomOut = document.getElementById('mobile-zoom-out');

// –î–æ–±–∞–≤–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
const mobileZoomControls = document.createElement('div');
mobileZoomControls.className = 'mobile-zoom-controls';
mobileZoomControls.innerHTML = `
    <button id="mobile-zoom-in-btn" class="mobile-zoom-btn">+</button>
    <button id="mobile-zoom-out-btn" class="mobile-zoom-btn">-</button>
`;
document.body.appendChild(mobileZoomControls);
const mobileZoomInBtn = document.getElementById('mobile-zoom-in-btn');
const mobileZoomOutBtn = document.getElementById('mobile-zoom-out-btn');

// –≠–ª–µ–º–µ–Ω—Ç—ã –ø–æ–¥–≤–∞–ª–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const playTimeDisplay = document.getElementById('play-time');
const sessionStartDisplay = document.getElementById('session-start');
const achievementsCountDisplay = document.getElementById('achievements-count');
const pointsSpentDisplay = document.getElementById('points-spent');
const researchCountDisplay = document.getElementById('research-count');
const totalProgressDisplay = document.getElementById('total-progress');

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
let gameUpdateInterval;
let footerStatsInterval;

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω-–ø—Ä–æ–≥—Ä–µ—Å—Å–∞
const offlineProgressModal = document.createElement('div');
offlineProgressModal.id = 'offline-progress-modal';
offlineProgressModal.className = 'modal hidden';
offlineProgressModal.innerHTML = `
    <div class="modal-content">
        <h2>–û—Ñ—Ñ–ª–∞–π–Ω-–ø—Ä–æ–≥—Ä–µ—Å—Å</h2>
        <p id="offline-progress-message">–ü–æ–∫–∞ –≤–∞—Å –Ω–µ –±—ã–ª–æ, –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏:</p>
        <div class="offline-progress-amount">
            <span id="offline-points-amount">0</span>
            <span class="stat-icon">üß¨</span>
        </div>
        <div class="modal-buttons">
            <button id="collect-offline-progress">–ó–∞–±—Ä–∞—Ç—å</button>
        </div>
    </div>
`;
document.body.appendChild(offlineProgressModal);
const collectOfflineButton = document.getElementById('collect-offline-progress');
const offlinePointsAmount = document.getElementById('offline-points-amount');

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
 */
function initGame() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω-–ø—Ä–æ–≥—Ä–µ—Å—Å
    checkOfflineProgress();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
    applyTheme(gameStorage.gameData.options.theme);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –¥–µ—Ä–µ–≤–∞
    if (!researchTreeContainer) {
        console.error("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–µ—Ä–µ–≤–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π");
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ—Ä–µ–≤–∞
    if (!RESEARCH_TREE || RESEARCH_TREE.length === 0) {
        console.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—Ä–µ–≤–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π");
        return;
    }
    
    try {
        console.log("–°–æ–∑–¥–∞–µ–º –¥–µ—Ä–µ–≤–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π...");
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ä–µ–≤–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
        researchTree = new ResearchTree(RESEARCH_TREE, researchTreeContainer);
        console.log("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π...");
        researchTree.buildTree();
        console.log("–î–µ—Ä–µ–≤–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ");
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ—Ä–µ–≤–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π:", error);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    try {
        if (!achievementsContainer) {
            console.error("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π");
        } else {
            achievementSystem = new AchievementSystem(ACHIEVEMENTS, achievementsContainer);
            achievementSystem.initAchievements();
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:", error);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    updateStats();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    startGameLoop();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ø–æ–¥–≤–∞–ª–µ
    initFooterStats();
    
    console.log('–ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ø–æ–¥–≤–∞–ª–µ
 */
function initFooterStats() {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–µ–∞–Ω—Å–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    if (sessionStartDisplay) {
        const sessionStartDate = new Date(gameStorage.gameData.sessionStartTime);
        const formattedStartTime = formatDate(sessionStartDate);
        sessionStartDisplay.textContent = formattedStartTime;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ø–æ–¥–≤–∞–ª–µ
    updateFooterStats();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ø–æ–¥–≤–∞–ª–µ
    if (footerStatsInterval) {
        clearInterval(footerStatsInterval);
    }
    
    footerStatsInterval = setInterval(() => {
        updateFooterStats();
    }, 1000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ø–æ–¥–≤–∞–ª–µ
 */
function updateFooterStats() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–≥—Ä—ã
    if (playTimeDisplay) {
        // –û–±—â–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è + –≤—Ä–µ–º—è —Å –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        const elapsedSeconds = gameStorage.gameData.totalPlayTime + 
            Math.floor((new Date() - gameStorage.lastSessionTime) / 1000);
        playTimeDisplay.textContent = formatTime(elapsedSeconds);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    if (achievementsCountDisplay) {
        const unlockedCount = gameStorage.gameData.unlockedAchievements.length;
        const totalCount = ACHIEVEMENTS.length;
        achievementsCountDisplay.textContent = `${unlockedCount}/${totalCount}`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –æ—á–∫–∏
    if (pointsSpentDisplay) {
        pointsSpentDisplay.textContent = formatNumber(gameStorage.gameData.pointsSpent || 0);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    if (researchCountDisplay) {
        const unlockedResearch = Object.keys(gameStorage.gameData.research).filter(
            id => gameStorage.gameData.research[id] > 0
        ).length;
        const totalResearch = RESEARCH_TREE.length;
        researchCountDisplay.textContent = `${unlockedResearch}/${totalResearch}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        if (totalProgressDisplay) {
            const progress = Math.round((unlockedResearch / totalResearch) * 100);
            totalProgressDisplay.textContent = `${progress}%`;
        }
    }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —É–¥–æ–±–Ω—ã–π –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç
 * @param {Date} date - –û–±—ä–µ–∫—Ç –¥–∞—Ç—ã
 * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
 */
function formatDate(date) {
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    
    return `${day}.${month}.${year} ${hours}:${minutes}`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú:–°–°
 * @param {number} seconds - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
 * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
 */
function formatTime(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    
    return [
        String(hours).padStart(2, '0'),
        String(minutes).padStart(2, '0'),
        String(secs).padStart(2, '0')
    ].join(':');
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–µ
    mainButton.addEventListener('click', handleMainButtonClick);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if (languageToggle) {
        languageToggle.addEventListener('click', handleLanguageToggle);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if (themeToggle) {
        themeToggle.addEventListener('click', handleThemeToggle);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if (soundToggle) {
        soundToggle.addEventListener('click', handleSoundToggle);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if (resetButton) {
        resetButton.addEventListener('click', showResetConfirmation);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    document.getElementById('achievements-button').addEventListener('click', () => {
        document.getElementById('achievements-modal').classList.remove('hidden');
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ü–ö
    settingsButton.addEventListener('click', toggleDesktopSettingsMenu);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ü–ö
    desktopThemeToggle.addEventListener('click', () => {
        handleThemeToggle();
        closeDesktopSettingsMenu();
    });
    
    desktopLanguageToggle.addEventListener('click', () => {
        handleLanguageToggle();
        closeDesktopSettingsMenu();
    });
    
    desktopSoundToggle.addEventListener('click', () => {
        handleSoundToggle();
        closeDesktopSettingsMenu();
    });
    
    desktopReset.addEventListener('click', () => {
        showResetConfirmation();
        closeDesktopSettingsMenu();
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    document.addEventListener('click', (e) => {
        if (!desktopSettingsMenu.contains(e.target) && !settingsButton.contains(e.target) && 
            !desktopSettingsMenu.classList.contains('hidden')) {
            closeDesktopSettingsMenu();
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞
    confirmYes.addEventListener('click', handleResetConfirm);
    confirmNo.addEventListener('click', hideConfirmModal);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    confirmModal.addEventListener('click', function(event) {
        if (event.target === confirmModal) {
            hideConfirmModal();
        }
    });
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
    setupMobileMenu();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö –∂–µ—Å—Ç–æ–≤ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    setupTouchGestures();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–∫–∞—á–∫–∏ –ø–æ–¥–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    document.addEventListener('click', (event) => {
        if (event.target.classList.contains('auto-subresearch-btn')) {
            const parentId = event.target.getAttribute('data-parentid');
            if (parentId && researchTree) {
                const unlocked = researchTree.unlockCheapestSubresearch(parentId);
                if (!unlocked) {
                    showNotification('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å');
                    playSound('error');
                }
            }
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (mobileMainButton) {
        mobileMainButton.addEventListener('click', handleMainButtonClick);
    }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –∏ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
 */
function setupMobileMenu() {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –±—É—Ä–≥–µ—Ä
    mobileMenuToggle.addEventListener('click', () => {
        mobileMenuToggle.classList.toggle('active');
        
        if (mobileMenu.classList.contains('active')) {
            mobileMenu.classList.remove('active');
            setTimeout(() => {
                mobileMenu.classList.add('hidden');
            }, 300);
        } else {
            mobileMenu.classList.remove('hidden');
            setTimeout(() => {
                mobileMenu.classList.add('active');
            }, 10);
        }
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    document.addEventListener('click', (e) => {
        if (!mobileMenu.contains(e.target) && !mobileMenuToggle.contains(e.target) && 
            mobileMenu.classList.contains('active')) {
            mobileMenuToggle.classList.remove('active');
            mobileMenu.classList.remove('active');
            setTimeout(() => {
                mobileMenu.classList.add('hidden');
            }, 300);
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    mobileThemeToggle.addEventListener('click', () => {
        handleThemeToggle();
        closeMobileMenu();
    });
    
    mobileLangToggle.addEventListener('click', () => {
        handleLanguageToggle();
        closeMobileMenu();
    });
    
    mobileAchievements.addEventListener('click', () => {
        document.getElementById('achievements-modal').classList.remove('hidden');
        closeMobileMenu();
    });
    
    mobileSoundToggle.addEventListener('click', () => {
        handleSoundToggle();
        closeMobileMenu();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∑–≤—É–∫–∞ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –º–µ–Ω—é
        const soundIcon = mobileSoundToggle.querySelector('.mobile-icon');
        if (soundIcon) {
            soundIcon.textContent = isSoundEnabled() ? 'üîà' : 'üîá';
        }
    });
    
    mobileReset.addEventListener('click', () => {
        showResetConfirmation();
        closeMobileMenu();
    });
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
    mobileZoomIn.addEventListener('click', () => {
        zoomResearchTree(0.2);
        closeMobileMenu();
    });
    
    mobileZoomOut.addEventListener('click', () => {
        zoomResearchTree(-0.2);
        closeMobileMenu();
    });
    
    // –ö–Ω–æ–ø–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
    mobileZoomInBtn.addEventListener('click', () => zoomResearchTree(0.2));
    mobileZoomOutBtn.addEventListener('click', () => zoomResearchTree(-0.2));
}

/**
 * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
 */
function closeMobileMenu() {
    mobileMenuToggle.classList.remove('active');
    mobileMenu.classList.remove('active');
    setTimeout(() => {
        mobileMenu.classList.add('hidden');
    }, 300);
}

/**
 * –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
 * @param {number} deltaScale - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞
 */
function zoomResearchTree(deltaScale) {
    if (researchTree) {
        researchTree.zoom(deltaScale);
    }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö –∂–µ—Å—Ç–æ–≤ –¥–ª—è –¥–µ—Ä–µ–≤–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
 */
function setupTouchGestures() {
    const container = document.querySelector('.tree-container');
    if (!container) return;
    
    let isDragging = false;
    let startX, startY;
    let scrollLeft, scrollTop;
    let startDistance = 0;
    let initialScale = 1;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∫–∞—Å–∞–Ω–∏—è
    container.addEventListener('touchstart', (e) => {
        if (e.touches.length === 1) {
            // –û–¥–Ω–æ –∫–∞—Å–∞–Ω–∏–µ - –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
            isDragging = true;
            startX = e.touches[0].clientX;
            startY = e.touches[0].clientY;
            scrollLeft = container.scrollLeft;
            scrollTop = container.scrollTop;
        } else if (e.touches.length === 2) {
            // –î–≤–∞ –∫–∞—Å–∞–Ω–∏—è - –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            isDragging = false;
            startDistance = getDistance(
                e.touches[0].clientX, e.touches[0].clientY,
                e.touches[1].clientX, e.touches[1].clientY
            );
            initialScale = researchTree ? researchTree.currentScale : 1;
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –ø–∞–ª—å—Ü–∞–º–∏
    container.addEventListener('touchmove', (e) => {
        if (isDragging && e.touches.length === 1) {
            // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
            e.preventDefault();
            const x = e.touches[0].clientX;
            const y = e.touches[0].clientY;
            const moveX = x - startX;
            const moveY = y - startY;
            
            container.scrollLeft = scrollLeft - moveX;
            container.scrollTop = scrollTop - moveY;
        } else if (e.touches.length === 2) {
            // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
            e.preventDefault();
            const currentDistance = getDistance(
                e.touches[0].clientX, e.touches[0].clientY,
                e.touches[1].clientX, e.touches[1].clientY
            );
            
            if (startDistance > 0 && researchTree) {
                const scale = currentDistance / startDistance;
                const newScale = Math.max(0.5, Math.min(initialScale * scale, 1.5));
                researchTree.setScale(newScale);
            }
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–∞—Å–∞–Ω–∏—è
    container.addEventListener('touchend', () => {
        isDragging = false;
    });
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∂–µ—Å—Ç–∞—Ö –Ω–∞ –¥–µ—Ä–µ–≤–µ
    container.addEventListener('touchmove', (e) => {
        if (e.touches.length > 1) {
            e.preventDefault();
        }
    }, { passive: false });
}

/**
 * –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
 */
function getDistance(x1, y1, x2, y2) {
    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∑–≤—É–∫
 * @returns {boolean} - –°—Ç–∞—Ç—É—Å –∑–≤—É–∫–∞
 */
function isSoundEnabled() {
    return gameStorage.gameData.options.soundEnabled !== false;
}

/**
 * –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
 */
function startGameLoop() {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if (gameUpdateInterval) {
        clearInterval(gameUpdateInterval);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    gameUpdateInterval = setInterval(() => {
        updateGame();
    }, UPDATE_INTERVAL);
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
 */
function stopGameLoop() {
    if (gameUpdateInterval) {
        clearInterval(gameUpdateInterval);
        gameUpdateInterval = null;
    }
    
    if (footerStatsInterval) {
        clearInterval(footerStatsInterval);
        footerStatsInterval = null;
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–µ
 */
function handleMainButtonClick() {
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
    gameStorage.gameData.totalClicks++;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—É—â–µ–π —Å–∏–ª–æ–π –∫–ª–∏–∫–∞
    const pointsToAdd = gameStorage.gameData.clickPower;
    gameStorage.gameData.points += pointsToAdd;
    gameStorage.gameData.totalPoints += pointsToAdd;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ
    mainButton.classList.add('clicked');
    // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
    if (mobileMainButton) {
        mobileMainButton.classList.add('clicked');
    }
    
    // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    setTimeout(() => {
        mainButton.classList.remove('clicked');
        if (mobileMainButton) {
            mobileMainButton.classList.remove('clicked');
        }
    }, 100);
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∫–ª–∏–∫–∞
    playSound('click');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    updateStats();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    checkAchievements();
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏)
 */
function updateGame() {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –æ—Ç –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
    const passivePointsToAdd = gameStorage.gameData.passiveIncome;
    
    if (passivePointsToAdd > 0) {
        gameStorage.gameData.points += passivePointsToAdd;
        gameStorage.gameData.totalPoints += passivePointsToAdd;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        updateStats();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        checkAchievements();
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
 */
function updateStats() {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const oldPoints = pointsDisplay.textContent;
    const oldPerClick = perClickDisplay.textContent;
    const oldPerSecond = perSecondDisplay.textContent;
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const newPoints = formatNumber(gameStorage.gameData.points);
    const newPerClick = formatNumber(gameStorage.gameData.clickPower);
    const newPerSecond = formatNumber(gameStorage.gameData.passiveIncome);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—á–∫–æ–≤
    pointsDisplay.textContent = newPoints;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –∑–∞ –∫–ª–∏–∫
    perClickDisplay.textContent = newPerClick;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
    perSecondDisplay.textContent = newPerSecond;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –∏–∑–º–µ–Ω–∏–≤—à–∏—Ö—Å—è –∑–Ω–∞—á–µ–Ω–∏–π
    if (oldPoints !== newPoints) {
        animateValue(pointsDisplay);
    }
    
    if (oldPerClick !== newPerClick) {
        animateValue(perClickDisplay);
    }
    
    if (oldPerSecond !== newPerSecond) {
        animateValue(perSecondDisplay);
    }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 * @param {HTMLElement} element - –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
 */
function animateValue(element) {
    // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å
    element.classList.remove('updated');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        element.classList.add('updated');
    }, 10);
    
    // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        element.classList.remove('updated');
    }, 510); // 510–º—Å = 500–º—Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ + 10–º—Å –∑–∞–¥–µ—Ä–∂–∫–∞
}

/**
 * –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∏–≥—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 */
function updateGameValues() {
    // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –¥–æ—Ö–æ–¥–∞ –æ—Ç –∫–ª–∏–∫–∞ –¥–ª—è –ø–æ–∑–¥–Ω–∏—Ö —ç—Ç–∞–ø–æ–≤
    const totalResearch = Object.keys(gameStorage.gameData.research).length;
    const totalLevels = Object.values(gameStorage.gameData.research).reduce((sum, level) => sum + level, 0);
    
    // –ò–∑–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º—É–ª—É —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –≤ –Ω–∞—á–∞–ª–µ
    const earlyGameDamping = Math.min(1, totalLevels / 15); // –£–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞ –Ω–∞ –ø–æ–ª–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å
    const exponentialFactor = 1 + (Math.pow(1.25, Math.min(100, totalResearch / 3 + totalLevels / 15)) - 1) * earlyGameDamping;
    
    // –°–∏–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∏–ª—ã –∫–ª–∏–∫–∞
    let baseClickPower = 0.1;
    
    // –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
    let basePassiveIncome = 0;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–æ 1
    let clickMultiplier = gameStorage.gameData.clickMultiplier || 1;
    let passiveMultiplier = gameStorage.gameData.passiveMultiplier || 1;
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º
    for (const researchId in gameStorage.gameData.research) {
        // –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        const level = gameStorage.gameData.research[researchId];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å –±–æ–ª—å—à–µ 0
        if (level > 0) {
            // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            const research = RESEARCH_TREE.find(item => item.id === researchId);
            if (!research) continue;
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º —Ä–æ—Å—Ç–æ–º
            const baseEffect = research.effect.value * 0.3; // –ï—â—ë —Å–∏–ª—å–Ω–µ–µ —É–º–µ–Ω—å—à–∞–µ–º –±–∞–∑–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç
            const levelBonus = research.effectPerLevel * (level - 1) * 0.4; // –£–º–µ–Ω—å—à–∞–µ–º –±–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å
            
            // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–æ—Å—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∑–∞–º–µ—Ç–Ω–µ–µ —Å –∫–∞–∂–¥—ã–º —É—Ä–æ–≤–Ω–µ–º
            const progressiveBonus = Math.pow(1.08, Math.max(0, level - 3)); // –£–º–µ–Ω—å—à–µ–Ω –º–Ω–æ–∂–∏—Ç–µ–ª—å –∏ –Ω–∞—á–∞–ª–æ —Ä–æ—Å—Ç–∞ —Å 3-–≥–æ —É—Ä–æ–≤–Ω—è
            const effectValue = (baseEffect + levelBonus) * progressiveBonus;
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–≥—Ä—ã
            switch (research.effect.type) {
                case "click":
                    // –ë–æ–ª–µ–µ –ø–ª–∞–≤–Ω—ã–π —Ä–æ—Å—Ç —Å–∏–ª—ã –∫–ª–∏–∫–∞
                    const clickScaling = Math.min(1, level / 8); // –£–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º–∞
                    baseClickPower += effectValue * (0.8 + clickScaling); // –£–º–µ–Ω—å—à–µ–Ω –±–∞–∑–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
                    break;
                    
                case "passive":
                    // –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Ç—ë—Ç –±—ã—Å—Ç—Ä–µ–µ –≤ –Ω–∞—á–∞–ª–µ
                    const passiveScaling = Math.min(1, level / 4);
                    basePassiveIncome += effectValue * (1.2 + passiveScaling); // –£–≤–µ–ª–∏—á–µ–Ω –±–∞–∑–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
                    break;
                    
                case "multiplier":
                    // –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ —Ä–∞—Å—Ç—É—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ –≤ –Ω–∞—á–∞–ª–µ
                    const multiplierScaling = Math.min(1, totalLevels / 20); // –£–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è —Ä–æ—Å—Ç–∞
                    const multiplierValue = effectValue * level * Math.pow(1.12, level - 1) * multiplierScaling;
                    clickMultiplier += multiplierValue;
                    passiveMultiplier += multiplierValue * 1.2; // –ü–∞—Å—Å–∏–≤–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–∞—Å—Ç—ë—Ç –±—ã—Å—Ç—Ä–µ–µ
                    break;
            }
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –æ—Ç –ø–æ–¥–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º
    if (gameStorage.gameData.subresearchMultiplier) {
        const subresearchScaling = Math.min(1, totalLevels / 25);
        const subresearchBonus = gameStorage.gameData.subresearchMultiplier * (1 + subresearchScaling);
        clickMultiplier += subresearchBonus;
        passiveMultiplier += subresearchBonus * 1.1; // –ë–æ–ª—å—à–∏–π –±–æ–Ω—É—Å –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–≥—Ä—ã
    const lateGameScaling = Math.min(1, totalLevels / 30); // –£–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è –¥–æ –ø–æ–∑–¥–Ω–µ–π –∏–≥—Ä—ã
    gameStorage.gameData.clickPower = baseClickPower * (1 + clickMultiplier * 3 * (1 + lateGameScaling * 2)) * exponentialFactor;
    gameStorage.gameData.passiveIncome = basePassiveIncome * (1 + passiveMultiplier * 2 * (1 + lateGameScaling * 2)) * exponentialFactor;
    
    // –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    gameStorage.gameData.clickPower = Math.round(gameStorage.gameData.clickPower * 100) / 100;
    gameStorage.gameData.passiveIncome = Math.round(gameStorage.gameData.passiveIncome * 100) / 100;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    updateStats();
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
 */
function handleThemeToggle() {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–∫–æ–Ω–∫–∏ —Ç–µ–º—ã
    const themeIcon = document.querySelector('.theme-icon');
    const moonIcon = document.querySelector('.moon-icon');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
    const newTheme = document.body.classList.contains('light-theme') ? 'dark' : 'light';

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
    applyTheme(newTheme);

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫
    if (newTheme === 'dark') {
        themeIcon.style.display = 'none';
        moonIcon.style.display = 'inline';
    } else {
        themeIcon.style.display = 'inline';
        moonIcon.style.display = 'none';
    }
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    playSound('toggle');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
    gameStorage.gameData.options.theme = newTheme;
    gameStorage.saveGame();
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º—É –∫ –∏–≥—Ä–µ
 * @param {string} theme - –¢–µ–º–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è ('light' –∏–ª–∏ 'dark')
 */
function applyTheme(theme) {
    if (theme === 'dark') {
        document.body.classList.remove('light-theme');
        document.body.classList.add('dark-theme');
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫
        const themeIcon = document.querySelector('.theme-icon');
        const moonIcon = document.querySelector('.moon-icon');
        if (themeIcon && moonIcon) {
            themeIcon.style.display = 'none';
            moonIcon.style.display = 'inline';
        }
    } else {
        document.body.classList.remove('dark-theme');
        document.body.classList.add('light-theme');
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫
        const themeIcon = document.querySelector('.theme-icon');
        const moonIcon = document.querySelector('.moon-icon');
        if (themeIcon && moonIcon) {
            themeIcon.style.display = 'inline';
            moonIcon.style.display = 'none';
        }
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞
 */
function handleSoundToggle() {
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∑–≤—É–∫
    const isSoundEnabled = toggleSound();
    
    // –ú–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    soundToggle.textContent = isSoundEnabled ? 'üîà' : 'üîá';
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
 * @param {string} message - –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
function showNotification(message) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notificationMessage.textContent = message;
    
    // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å —Å–∫—Ä—ã—Ç–∏—è
    notification.classList.remove('hidden');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.classList.add('hidden');
    }, 3000);
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 */
function showResetConfirmation() {
    confirmModal.classList.remove('hidden');
}

/**
 * –°–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
 */
function hideConfirmModal() {
    confirmModal.classList.add('hidden');
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 */
function handleResetConfirm() {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    gameStorage.resetProgress();
    
    // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    hideConfirmModal();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É
    updateGameValues();
    updateStats();
    
    // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–µ—Ä–µ–≤–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    researchTree.buildTree();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    achievementSystem.updateAchievements();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–æ–¥–≤–∞–ª–µ
    initFooterStats();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification('–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω');
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {number} number - –ß–∏—Å–ª–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
 */
function formatNumber(number) {
    if (number === Infinity) {
        return "MAX";
    }
    
    // –û–∫—Ä—É–≥–ª—è–µ–º —á–∏—Å–ª–æ –¥–æ —Ü–µ–ª–æ–≥–æ –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    number = Math.ceil(number);
    
    if (number >= 1e33) {
        return (number / 1e33).toFixed(2) + "D"; // –î–µ—Ü–∏–ª–ª–∏–æ–Ω—ã
    } else if (number >= 1e30) {
        return (number / 1e30).toFixed(2) + "N"; // –ù–æ–Ω–∏–ª–ª–∏–æ–Ω—ã
    } else if (number >= 1e27) {
        return (number / 1e27).toFixed(2) + "O"; // –û–∫—Ç–∏–ª–ª–∏–æ–Ω—ã
    } else if (number >= 1e24) {
        return (number / 1e24).toFixed(2) + "Sp"; // –°–µ–ø—Ç–∏–ª–ª–∏–æ–Ω—ã
    } else if (number >= 1e21) {
        return (number / 1e21).toFixed(2) + "S"; // –°–µ–∫—Å—Ç–∏–ª–ª–∏–æ–Ω—ã
    } else if (number >= 1e18) {
        return (number / 1e18).toFixed(2) + "Qi"; // –ö–≤–∏–Ω—Ç–∏–ª–ª–∏–æ–Ω—ã
    } else if (number >= 1e15) {
        return (number / 1e15).toFixed(2) + "Q"; // –ö–≤–∞–¥—Ä–∏–ª–ª–∏–æ–Ω—ã
    } else if (number >= 1e12) {
        return (number / 1e12).toFixed(2) + "T"; // –¢—Ä–∏–ª–ª–∏–æ–Ω—ã
    } else if (number >= 1e9) {
        return (number / 1e9).toFixed(2) + "B"; // –ú–∏–ª–ª–∏–∞—Ä–¥—ã
    } else if (number >= 1e6) {
        return (number / 1e6).toFixed(2) + "M"; // –ú–∏–ª–ª–∏–æ–Ω—ã
    } else if (number >= 1e3) {
        return (number / 1e3).toFixed(2) + "K"; // –¢—ã—Å—è—á–∏
    } else {
        return Math.floor(number).toString();
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞
 */
function handleLanguageToggle() {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
    const currentLang = gameStorage.gameData.options.language || 'ru';
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —è–∑—ã–∫
    const newLang = currentLang === 'ru' ? 'en' : 'ru';
    
    // –ú–µ–Ω—è–µ–º —è–∑—ã–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    gameStorage.gameData.options.language = newLang;
    gameStorage.saveGame();
    
    // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —è–∑—ã–∫–∞
    const langButton = document.querySelector('#language-toggle span');
    if (langButton) {
        langButton.textContent = newLang.toUpperCase();
    }
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    playSound('toggle');
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã —à–ª–∞ –ª–æ–≥–∏–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    location.reload();
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –æ—Ñ—Ñ–ª–∞–π–Ω-–ø—Ä–æ–≥—Ä–µ—Å—Å
 */
function checkOfflineProgress() {
    const lastLogout = gameStorage.gameData.lastLogout;
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏–ª–∏ –Ω–µ—Ç –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (!lastLogout || gameStorage.gameData.passiveIncome <= 0) {
        return;
    }
    
    const now = Date.now();
    const offlineTime = now - lastLogout; // –í—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 20 —Å–µ–∫—É–Ω–¥
    if (offlineTime < 20000) {
        return;
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—á–∫–∏ (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞ 24 —á–∞—Å–∞)
    const maxOfflineSeconds = 24 * 60 * 60; // 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    const offlineSeconds = Math.min(offlineTime / 1000, maxOfflineSeconds);
    const earnedPoints = Math.floor(gameStorage.gameData.passiveIncome * offlineSeconds);
    
    if (earnedPoints > 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –æ—Ñ—Ñ–ª–∞–π–Ω-–ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        offlinePointsAmount.textContent = formatNumber(earnedPoints);
        offlineProgressModal.classList.remove('hidden');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏
        collectOfflineButton.onclick = () => {
            // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏
            gameStorage.gameData.points += earnedPoints;
            gameStorage.gameData.totalPoints += earnedPoints;
            
            // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            offlineProgressModal.classList.add('hidden');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—á–∫–æ–≤
            updateStats();
            
            // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
            collectOfflineButton.onclick = null;
        };
    }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ü–ö
 */
function toggleDesktopSettingsMenu() {
    if (desktopSettingsMenu.classList.contains('hidden')) {
        desktopSettingsMenu.classList.remove('hidden');
    } else {
        closeDesktopSettingsMenu();
    }
}

/**
 * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ü–ö
 */
function closeDesktopSettingsMenu() {
    desktopSettingsMenu.classList.add('hidden');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    gameStorage.load();
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–≥—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    updateGameValues();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–≥—Ä—ã
    initGame();
}); 